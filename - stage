<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Δ Stage - Triangle Solver</title>
    <link href="https://fonts.googleapis.com/css2?family=Pacifico&family=Lobster&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Lobster', cursive;
            background-color: #0B0F2B;
            margin: 0;
            padding: 20px;
            color: #5F00FF;
            background-image: 
                linear-gradient(45deg, rgba(11, 15, 43, 0.8) 25%, transparent 25%, transparent 75%, rgba(11, 15, 43, 0.8) 75%, rgba(11, 15, 43, 0.8)),
                linear-gradient(45deg, rgba(11, 15, 43, 0.8) 25%, transparent 25%, transparent 75%, rgba(11, 15, 43, 0.8) 75%, rgba(11, 15, 43, 0.8)),
                radial-gradient(circle at 20% 30%, rgba(0, 255, 209, 0.15) 0%, transparent 25%),
                radial-gradient(circle at 80% 30%, rgba(95, 0, 255, 0.15) 0%, transparent 25%),
                radial-gradient(circle at 50% 80%, rgba(255, 59, 129, 0.15) 0%, transparent 25%),
                linear-gradient(rgba(0, 255, 209, 0.1) 1px, transparent 1px),
                linear-gradient(90deg, rgba(0, 255, 209, 0.1) 1px, transparent 1px);
            background-size: 
                100px 100px,
                100px 100px,
                200px 200px,
                200px 200px,
                200px 200px,
                20px 20px,
                20px 20px;
            background-position: 
                0 0, 50px 50px,
                0 0, 0 0, 0 0,
                0 0, 0 0;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            background-color: rgba(11, 15, 43, 0.9);
            border-radius: 15px;
            padding: 30px;
            box-shadow: 0 0 30px rgba(0, 255, 209, 0.3);
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 30px;
            border: 2px solid #00FFD1;
            position: relative;
            z-index: 1;
        }

        body::before {
            content: '';
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            height: 20px;
            background: linear-gradient(to bottom, rgba(0,0,0,0.5), transparent);
            z-index: 2;
        }

        body::after {
            content: '';
            position: fixed;
            bottom: 0;
            left: 0;
            right: 0;
            height: 20px;
            background: linear-gradient(to top, rgba(0,0,0,0.5), transparent);
            z-index: 2;
        }

        .input-section {
            display: flex;
            flex-direction: column;
        }

        .output-section {
            display: flex;
            flex-direction: column;
        }

        h1 {
            font-family: 'Pacifico', cursive;
            font-size: 40px;
            text-align: center;
            color: #00FFD1;
            margin-bottom: 30px;
            grid-column: 1 / -1;
            text-shadow: 0 0 10px rgba(0, 255, 209, 0.7);
            position: relative;
        }

        h1::after {
            content: '';
            position: absolute;
            bottom: -10px;
            left: 50%;
            transform: translateX(-50%);
            width: 80%;
            height: 3px;
            background: linear-gradient(90deg, transparent, #00FFD1, transparent);
            box-shadow: 0 0 15px #00FFD1;
        }

        .input-group {
            margin-bottom: 25px;
        }

        label {
            display: block;
            font-size: 22px;
            margin-bottom: 10px;
            color: #5F00FF;
            text-shadow: 0 0 5px rgba(95, 0, 255, 0.5);
        }

        input {
            width: 100%;
            padding: 12px 15px;
            font-size: 20px;
            border: 2px solid #00FFD1;
            border-radius: 8px;
            font-family: 'Lobster', cursive;
            background-color: rgba(11, 15, 43, 0.8);
            color: #5F00FF;
            box-shadow: 0 0 10px rgba(0, 255, 209, 0.3);
        }

        input::placeholder {
            color: #5F00FF;
            opacity: 0.6;
        }

        .buttons {
            display: flex;
            gap: 20px;
            margin: 20px 0;
            justify-content: center;
        }

        button {
            padding: 12px 30px;
            font-size: 22px;
            font-family: 'Lobster', cursive;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s;
            box-shadow: 0 0 15px rgba(0, 255, 209, 0.5);
        }

        #calculate {
            background-color: #FFD700;
            color: #0B0F2B;
        }

        #reset {
            background-color: #D80032;
            color: #0B0F2B;
        }

        button:hover {
            transform: translateY(-3px);
            box-shadow: 0 0 20px rgba(0, 255, 209, 0.8);
        }

        button:active {
            transform: translateY(1px);
        }

        .triangle-container {
            background-color: rgba(11, 15, 43, 0.7);
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 0 15px rgba(0, 255, 209, 0.3);
            margin-bottom: 20px;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 350px;
            border: 2px solid #00FFD1;
            position: relative;
            overflow: hidden;
        }

        .triangle-container::before {
            content: '';
            position: absolute;
            top: -50%;
            left: -50%;
            right: -50%;
            bottom: -50%;
            background: radial-gradient(circle at center, rgba(0, 255, 209, 0.1) 0%, transparent 70%);
            z-index: -1;
        }

        #triangleCanvas {
            max-width: 100%;
            max-height: 300px;
            border-radius: 8px;
        }

        .results {
            background-color: rgba(11, 15, 43, 0.7);
            border-radius: 10px;
            padding: 20px;
            box-shadow: 0 0 15px rgba(0, 255, 209, 0.3);
            border: 2px solid #00FFD1;
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 15px;
        }

        .result-item {
            display: flex;
            justify-content: space-between;
            margin-bottom: 15px;
            padding-bottom: 10px;
            border-bottom: 1px dashed #00FFD1;
        }

        .result-label {
            font-size: 22px;
            color: #5F00FF;
        }

        .result-value {
            font-size: 22px;
            color: #9A1F40;
            font-weight: bold;
            text-shadow: 0 0 5px rgba(154, 31, 64, 0.5);
        }

        /* New style for horizontal explanations */
        .horizontal-explanations {
            display: flex;
            overflow-x: auto;
            gap: 20px;
            padding: 20px;
            background-color: rgba(11, 15, 43, 0.7);
            border-radius: 10px;
            margin-top: 20px;
            border: 2px solid #00FFD1;
            box-shadow: 0 0 15px rgba(0, 255, 209, 0.3);
        }

        .explanation-section {
            min-width: 300px;
            padding: 15px;
            background-color: rgba(11, 15, 43, 0.5);
            border-radius: 8px;
            border-left: 4px solid #00FFD1;
            color: #3A4C6E;
        }

        .explanation-title {
            font-weight: bold;
            color: #00FFD1;
            margin-bottom: 10px;
            font-size: 24px;
        }

        .mode-selector {
            margin-bottom: 20px;
            text-align: center;
        }

        .mode-selector button {
            padding: 8px 15px;
            font-size: 16px;
            margin: 0 5px;
            background-color: rgba(95, 0, 255, 0.5);
            color: #00FFD1;
            border: 1px solid #00FFD1;
        }

        .mode-selector button.active {
            background-color: #5F00FF;
            color: #0B0F2B;
            box-shadow: 0 0 10px rgba(0, 255, 209, 0.8);
        }

        @media (max-width: 900px) {
            .container {
                grid-template-columns: 1fr;
            }
            
            .output-section {
                order: -1;
            }
            
            .horizontal-explanations {
                flex-direction: column;
                overflow-x: hidden;
            }
            
            .explanation-section {
                min-width: auto;
            }
            
            .results {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <h1>Δ Stage</h1>
    
    <div class="container">
        <div class="input-section">
            <div class="mode-selector">
                <button id="decimalMode" class="active">Decimal Mode</button>
            </div>
            
            <div class="input-group">
                <label for="sideA">Side a:</label>
                <input type="text" id="sideA" placeholder="Ex: 5, 3/4 or 1.5">
            </div>
            
            <div class="input-group">
                <label for="sideB">Side b:</label>
                <input type="text" id="sideB" placeholder="Ex: 7, 1 1/2 or π/2">
            </div>
            
            <div class="input-group">
                <label for="sideC">Side c:</label>
                <input type="text" id="sideC" placeholder="Ex: 8, 2.5 or √3">
            </div>
            
            <div class="input-group">
                <label for="angleA">Angle A (degrees):</label>
                <input type="text" id="angleA" placeholder="Ex: 30, 45.5 or 1/3">
            </div>
            
            <div class="input-group">
                <label for="angleB">Angle B (degrees):</label>
                <input type="text" id="angleB" placeholder="Ex: 60, 1/3 or π/4">
            </div>
            
            <div class="input-group">
                <label for="angleC">Angle C (degrees):</label>
                <input type="text" id="angleC" placeholder="Ex: 90, 2π/3 or 0.785">
            </div>
            
            <div class="buttons">
                <button id="calculate">Calculate</button>
                <button id="reset">Reset</button>
            </div>
        </div>
        
        <div class="output-section">
            <div class="triangle-container">
                <canvas id="triangleCanvas" width="400" height="300"></canvas>
            </div>
            
            <div class="results">
                <div class="result-column-left">
                    <div class="result-item">
                        <span class="result-label">Side a:</span>
                        <span class="result-value" id="resultA">-</span>
                    </div>
                    <div class="result-item">
                        <span class="result-label">Side b:</span>
                        <span class="result-value" id="resultB">-</span>
                    </div>
                    <div class="result-item">
                        <span class="result-label">Side c:</span>
                        <span class="result-value" id="resultC">-</span>
                    </div>
                </div>
                
                <div class="result-column-right">
                    <div class="result-item">
                        <span class="result-label">Angle A:</span>
                        <span class="result-value" id="resultAngleA">-</span>°
                    </div>
                    <div class="result-item">
                        <span class="result-label">Angle B:</span>
                        <span class="result-value" id="resultAngleB">-</span>°
                    </div>
                    <div class="result-item">
                        <span class="result-label">Angle C:</span>
                        <span class="result-value" id="resultAngleC">-</span>°
                    </div>
                </div>
                
                <div class="result-item" style="grid-column: span 2;">
                    <span class="result-label">Perimeter:</span>
                    <span class="result-value" id="perimeter">-</span>
                </div>
                <div class="result-item" style="grid-column: span 2;">
                    <span class="result-label">Area:</span>
                    <span class="result-value" id="area">-</span>
                </div>
            </div>
        </div>
    </div>

    <!-- Subtitle added above explanations -->
    <div style="text-align: center; margin: 20px 0 10px 0; font-family: 'Pacifico', cursive; font-size: 40px; color: #A28DFF; text-shadow: 0 0 8px rgba(162, 141, 255, 0.7);">
        Alien-Style solving
    </div>

    <!-- New horizontal container for explanations -->
    <div class="horizontal-explanations" id="explanation">
        <div class="explanation-section" id="explanation-method">
            <div class="explanation-title">Solution Method</div>
            <div id="method-content">-</div>
        </div>
        
        <div class="explanation-section" id="explanation-sides">
            <div class="explanation-title">Side Calculations</div>
            <div id="sides-content">-</div>
        </div>
        
        <div class="explanation-section" id="explanation-angles">
            <div class="explanation-title">Angle Calculations</div>
            <div id="angles-content">-</div>
        </div>
        
        <div class="explanation-section" id="explanation-perimeter">
            <div class="explanation-title">Perimeter</div>
            <div id="perimeter-content">-</div>
        </div>
        
        <div class="explanation-section" id="explanation-area">
            <div class="explanation-title">Area</div>
            <div id="area-content">-</div>
        </div>
        
        <div class="explanation-section" id="explanation-validation">
            <div class="explanation-title">Validation</div>
            <div id="validation-content">-</div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const calculateBtn = document.getElementById('calculate');
            const resetBtn = document.getElementById('reset');
            const decimalModeBtn = document.getElementById('decimalMode');
            const canvas = document.getElementById('triangleCanvas');
            const ctx = canvas.getContext('2d');
            
            let currentMode = 'decimal';
            
            function simplifyFraction(numerator, denominator) {
                if (denominator === 0) return { numerator: 0, denominator: 0 };
                
                const gcd = (a, b) => b ? gcd(b, a % b) : a;
                const commonDivisor = gcd(Math.abs(numerator), Math.abs(denominator));
                
                return {
                    numerator: numerator / commonDivisor,
                    denominator: denominator / commonDivisor
                };
            }
            
            function decimalToFraction(decimal, precision = 0.0001) {
                if (decimal === 0) return { numerator: 0, denominator: 1 };
                
                let sign = 1;
                if (decimal < 0) {
                    sign = -1;
                    decimal = -decimal;
                }
                
                let numerator, denominator;
                let lower_n = 0, lower_d = 1;
                let upper_n = 1, upper_d = 1;
                
                while (true) {
                    const middle_n = lower_n + upper_n;
                    const middle_d = lower_d + upper_d;
                    
                    if (middle_d * (decimal + precision) < middle_n) {
                        upper_n = middle_n;
                        upper_d = middle_d;
                    } else if (middle_n < (decimal - precision) * middle_d) {
                        lower_n = middle_n;
                        lower_d = middle_d;
                    } else {
                        numerator = middle_n * sign;
                        denominator = middle_d;
                        break;
                    }
                }
                
                return simplifyFraction(numerator, denominator);
            }
            
            function formatFraction(numerator, denominator) {
                if (denominator === 1) return numerator.toString();
                if (numerator === 0) return '0';
                
                const sign = numerator * denominator < 0 ? '-' : '';
                const absNumerator = Math.abs(numerator);
                const absDenominator = Math.abs(denominator);
                
                const whole = Math.floor(absNumerator / absDenominator);
                const remainder = absNumerator % absDenominator;
                
                if (whole > 0 && remainder > 0) {
                    return `${sign}${whole} ${remainder}/${absDenominator}`;
                } else if (remainder > 0) {
                    return `${sign}${remainder}/${absDenominator}`;
                } else {
                    return `${sign}${whole}`;
                }
            }
            
            function evaluateMathExpression(expr) {
                const allowed = ['sin', 'cos', 'tan', 'asin', 'acos', 'atan', 'sqrt', 'log', 'exp', 'PI', 'pi', 'π'];
                
                expr = expr.replace(/\s+/g, '');
                
                if (!/^[0-9+\-*\/^().√π]+$/.test(expr.replace(/sin|cos|tan|asin|acos|atan|sqrt|log|exp|PI|pi/g, ''))) {
                    return null;
                }
                
                expr = expr.replace(/π|pi/g, 'Math.PI');
                expr = expr.replace(/√/g, 'Math.sqrt');
                
                try {
                    const evalFn = new Function('return ' + expr);
                    const result = evalFn();
                    
                    if (typeof result === 'number' && !isNaN(result)) {
                        return result;
                    }
                } catch (e) {
                    return null;
                }
                
                return null;
            }
            
            function parseInput(input) {
                if (!input || input.trim() === '') return null;
                
                const mathResult = evaluateMathExpression(input);
                if (mathResult !== null) return mathResult;
                
                const mixedFraction = input.match(/^(-?\d+)\s+(-?\d+)\/(-?\d+)$/);
                if (mixedFraction) {
                    const whole = parseFloat(mixedFraction[1]);
                    const numerator = parseFloat(mixedFraction[2]);
                    const denominator = parseFloat(mixedFraction[3]);
                    if (denominator !== 0) {
                        return whole + (numerator / denominator);
                    }
                }
                
                const simpleFraction = input.match(/^(-?\d+)\/(-?\d+)$/);
                if (simpleFraction) {
                    const numerator = parseFloat(simpleFraction[1]);
                    const denominator = parseFloat(simpleFraction[2]);
                    if (denominator !== 0) {
                        return numerator / denominator;
                    }
                }
                
                const decimal = parseFloat(input);
                if (!isNaN(decimal)) {
                    return decimal;
                }
                
                return null;
            }
            
            function solveTriangleAlgebraically(sides, angles) {
                if (sides.a && sides.b && sides.c) {
                    if (sides.a + sides.b <= sides.c || sides.a + sides.c <= sides.b || sides.b + sides.c <= sides.a) {
                        return { success: false, message: 'Sides do not satisfy the triangle inequality' };
                    }
                    
                    angles.A = Math.acos((Math.pow(sides.b, 2) + Math.pow(sides.c, 2) - Math.pow(sides.a, 2)) / (2 * sides.b * sides.c)) * 180 / Math.PI;
                    angles.B = Math.acos((Math.pow(sides.a, 2) + Math.pow(sides.c, 2) - Math.pow(sides.b, 2)) / (2 * sides.a * sides.c)) * 180 / Math.PI;
                    angles.C = 180 - angles.A - angles.B;
                    
                    return { success: true, sides, angles };
                }
                
                if (Object.values(sides).filter(Boolean).length === 2 && 
                    Object.values(angles).filter(Boolean).length >= 1) {
                    
                    let knownAngle;
                    if (angles.A !== null) knownAngle = 'A';
                    else if (angles.B !== null) knownAngle = 'B';
                    else knownAngle = 'C';
                    
                    if (knownAngle === 'A' && sides.b !== null && sides.c !== null) {
                        sides.a = Math.sqrt(Math.pow(sides.b, 2) + Math.pow(sides.c, 2) - 2 * sides.b * sides.c * Math.cos(angles.A * Math.PI / 180));
                    } else if (knownAngle === 'B' && sides.a !== null && sides.c !== null) {
                        sides.b = Math.sqrt(Math.pow(sides.a, 2) + Math.pow(sides.c, 2) - 2 * sides.a * sides.c * Math.cos(angles.B * Math.PI / 180));
                    } else if (knownAngle === 'C' && sides.a !== null && sides.b !== null) {
                        sides.c = Math.sqrt(Math.pow(sides.a, 2) + Math.pow(sides.b, 2) - 2 * sides.a * sides.b * Math.cos(angles.C * Math.PI / 180));
                    } else {
                        return { success: false, message: 'Invalid SAS combination' };
                    }
                    
                    return solveTriangleAlgebraically(sides, angles);
                }
                
                if (Object.values(angles).filter(Boolean).length >= 2) {
                    if (angles.A === null) angles.A = 180 - angles.B - angles.C;
                    else if (angles.B === null) angles.B = 180 - angles.A - angles.C;
                    else angles.C = 180 - angles.A - angles.B;
                    
                    if (Math.abs(angles.A + angles.B + angles.C - 180) > 0.0001) {
                        return { success: false, message: 'Angle sum is not 180°' };
                    }
                    
                    let referenceSide, referenceAngle;
                    if (sides.a !== null) {
                        referenceSide = sides.a;
                        referenceAngle = angles.A;
                    } else if (sides.b !== null) {
                        referenceSide = sides.b;
                        referenceAngle = angles.B;
                    } else if (sides.c !== null) {
                        referenceSide = sides.c;
                        referenceAngle = angles.C;
                    } else {
                        return { success: false, message: 'At least one side is required' };
                    }
                    
                    const ratio = referenceSide / Math.sin(referenceAngle * Math.PI / 180);
                    if (sides.a === null) sides.a = Math.sin(angles.A * Math.PI / 180) * ratio;
                    if (sides.b === null) sides.b = Math.sin(angles.B * Math.PI / 180) * ratio;
                    if (sides.c === null) sides.c = Math.sin(angles.C * Math.PI / 180) * ratio;
                    
                    return { success: true, sides, angles };
                }
                
                return { success: false, message: 'Not enough data to solve' };
            }
            
            function drawTriangle(sides, angles) {
                const width = canvas.width;
                const height = canvas.height;
                const padding = 40;
                const drawWidth = width - padding * 2;
                const drawHeight = height - padding * 2;
                
                ctx.clearRect(0, 0, width, height);
                
                let a, b, c;
                if (sides.a && sides.b && sides.c) {
                    if (sides.a + sides.b <= sides.c || sides.a + sides.c <= sides.b || sides.b + sides.c <= sides.a) {
                        ctx.font = '18px Lobster';
                        ctx.fillStyle = '#FF3B81';
                        ctx.textAlign = 'center';
                        ctx.fillText('Invalid triangle!', width / 2, height / 2 - 15);
                        ctx.fillText('Sum of any two sides must be greater than the third', width / 2, height / 2 + 15);
                        return false;
                    }
                    
                    const maxSide = Math.max(sides.a, sides.b, sides.c);
                    const scale = drawWidth / maxSide * 0.8;
                    
                    a = { x: padding, y: height - padding };
                    b = { x: padding + sides.c * scale, y: height - padding };
                    
                    const s = (sides.a + sides.b + sides.c) / 2;
                    const area = Math.sqrt(s * (s - sides.a) * (s - sides.b) * (s - sides.c));
                    const heightC = (2 * area) / sides.c;
                    
                    c = { 
                        x: padding + (Math.pow(sides.c, 2) + Math.pow(sides.b, 2) - Math.pow(sides.a, 2)) / (2 * sides.c) * scale,
                        y: height - padding - heightC * scale
                    };
                } else if (angles.A && angles.B && angles.C) {
                    const angleSum = angles.A + angles.B + angles.C;
                    if (Math.abs(angleSum - 180) > 0.1) {
                        ctx.font = '18px Lobster';
                        ctx.fillStyle = '#FF3B81';
                        ctx.textAlign = 'center';
                        ctx.fillText('Invalid angles!', width / 2, height / 2 - 15);
                        ctx.fillText(`Sum must be 180° (current: ${angleSum.toFixed(1)}°)`, width / 2, height / 2 + 15);
                        return false;
                    }
                    
                    const sideA = 100;
                    const sideB = sideA * Math.sin(angles.B * Math.PI / 180) / Math.sin(angles.A * Math.PI / 180);
                    const sideC = sideA * Math.sin(angles.C * Math.PI / 180) / Math.sin(angles.A * Math.PI / 180);
                    
                    const maxSide = Math.max(sideA, sideB, sideC);
                    const scale = drawWidth / maxSide * 0.8;
                    
                    a = { x: padding, y: height - padding };
                    b = { x: padding + sideC * scale, y: height - padding };
                    
                    const heightC = sideB * Math.sin(angles.A * Math.PI / 180) * scale;
                    c = { 
                        x: padding + sideC * Math.cos(angles.A * Math.PI / 180) * scale,
                        y: height - padding - heightC
                    };
                } else {
                    ctx.font = '20px Lobster';
                    ctx.fillStyle = '#5F00FF';
                    ctx.textAlign = 'center';
                    ctx.fillText('Enter triangle data', width / 2, height / 2);
                    return false;
                }
                
                ctx.beginPath();
                ctx.moveTo(a.x, a.y);
                ctx.lineTo(b.x, b.y);
                ctx.lineTo(c.x, c.y);
                ctx.closePath();
                ctx.strokeStyle = '#FF3B81';
                ctx.lineWidth = 3;
                ctx.stroke();
                ctx.fillStyle = 'rgba(255, 59, 129, 0.1)';
                ctx.fill();
                
                function drawAngleArc(point, startAngle, endAngle, radius) {
                    ctx.beginPath();
                    ctx.arc(point.x, point.y, radius, startAngle, endAngle);
                    ctx.strokeStyle = '#00FFD1';
                    ctx.lineWidth = 1.5;
                    ctx.stroke();
                }
                
                if (!angles.A || !angles.B || !angles.C) {
                    const ab = Math.sqrt(Math.pow(b.x - a.x, 2) + Math.pow(b.y - a.y, 2));
                    const bc = Math.sqrt(Math.pow(c.x - b.x, 2) + Math.pow(c.y - b.y, 2));
                    const ca = Math.sqrt(Math.pow(a.x - c.x, 2) + Math.pow(a.y - c.y, 2));
                    
                    angles.A = Math.acos((Math.pow(ab, 2) + Math.pow(ca, 2) - Math.pow(bc, 2)) / (2 * ab * ca)) * 180 / Math.PI;
                    angles.B = Math.acos((Math.pow(ab, 2) + Math.pow(bc, 2) - Math.pow(ca, 2)) / (2 * ab * bc)) * 180 / Math.PI;
                    angles.C = Math.acos((Math.pow(bc, 2) + Math.pow(ca, 2) - Math.pow(ab, 2)) / (2 * bc * ca)) * 180 / Math.PI;
                }
                
                const radius = 20;
                
                const angleAB = Math.atan2(b.y - a.y, b.x - a.x);
                const angleAC = Math.atan2(c.y - a.y, c.x - a.x);
                drawAngleArc(a, angleAB, angleAC, radius);
                
                const angleBA = Math.atan2(a.y - b.y, a.x - b.x);
                const angleBC = Math.atan2(c.y - b.y, c.x - b.x);
                drawAngleArc(b, angleBA, angleBC, radius);
                
                const angleCA = Math.atan2(a.y - c.y, a.x - c.x);
                const angleCB = Math.atan2(b.y - c.y, b.x - c.x);
                drawAngleArc(c, angleCB, angleCA, radius);
                
                ctx.font = '16px Lobster';
                ctx.fillStyle = '#00FFD1';
                ctx.textAlign = 'center';
                
                if (sides.a) {
                    const midBC = { x: (b.x + c.x) / 2, y: (b.y + c.y) / 2 };
                    ctx.fillText(sides.a.toFixed(2), midBC.x, midBC.y);
                }
                
                if (sides.b) {
                    const midAC = { x: (a.x + c.x) / 2, y: (a.y + c.y) / 2 };
                    ctx.fillText(sides.b.toFixed(2), midAC.x, midAC.y);
                }
                
                if (sides.c) {
                    const midAB = { x: (a.x + b.x) / 2, y: (a.y + b.y) / 2 };
                    ctx.fillText(sides.c.toFixed(2), midAB.x, midAB.y);
                }
                
                ctx.font = '14px Lobster';
                ctx.fillStyle = '#5F00FF';
                
                const angleATextPos = {
                    x: a.x + Math.cos((angleAB + angleAC) / 2) * (radius + 10),
                    y: a.y + Math.sin((angleAB + angleAC) / 2) * (radius + 10)
                };
                ctx.fillText(angles.A.toFixed(1) + '°', angleATextPos.x, angleATextPos.y);
                
                const angleBTextPos = {
                    x: b.x + Math.cos((angleBA + angleBC) / 2) * (radius + 10),
                    y: b.y + Math.sin((angleBA + angleBC) / 2) * (radius + 10)
                };
                ctx.fillText(angles.B.toFixed(1) + '°', angleBTextPos.x, angleBTextPos.y);
                
                const angleCTextPos = {
                    x: c.x + Math.cos((angleCB + angleCA) / 2) * (radius + 10),
                    y: c.y + Math.sin((angleCB + angleCA) / 2) * (radius + 10)
                };
                ctx.fillText(angles.C.toFixed(1) + '°', angleCTextPos.x, angleCTextPos.y);
                
                return true;
            }
            
            function solveTriangle() {
                const sideA = parseInput(document.getElementById('sideA').value);
                const sideB = parseInput(document.getElementById('sideB').value);
                const sideC = parseInput(document.getElementById('sideC').value);
                const angleA = parseInput(document.getElementById('angleA').value);
                const angleB = parseInput(document.getElementById('angleB').value);
                const angleC = parseInput(document.getElementById('angleC').value);
                
                const sides = { a: sideA, b: sideB, c: sideC };
                const angles = { A: angleA, B: angleB, C: angleC };
                
                const knownSides = [sideA, sideB, sideC].filter(x => x !== null).length;
                const knownAngles = [angleA, angleB, angleC].filter(x => x !== null).length;
                const totalKnown = knownSides + knownAngles;
                
                if (totalKnown < 3) {
                    document.getElementById('method-content').textContent = 'At least 3 elements (sides or angles) are required to solve the triangle.';
                    document.getElementById('sides-content').textContent = '-';
                    document.getElementById('angles-content').textContent = '-';
                    document.getElementById('perimeter-content').textContent = '-';
                    document.getElementById('area-content').textContent = '-';
                    document.getElementById('validation-content').textContent = '-';
                    
                    drawTriangle({}, {});
                    return;
                }
                
                const solution = solveTriangleAlgebraically(sides, angles);
                
                if (!solution.success) {
                    document.getElementById('method-content').textContent = solution.message;
                    document.getElementById('sides-content').textContent = '-';
                    document.getElementById('angles-content').textContent = '-';
                    document.getElementById('perimeter-content').textContent = '-';
                    document.getElementById('area-content').textContent = '-';
                    document.getElementById('validation-content').textContent = '-';
                    
                    drawTriangle({}, {});
                    return;
                }
                
                let perimeter = null;
                let area = null;
                
                if (solution.sides.a && solution.sides.b && solution.sides.c) {
                    perimeter = solution.sides.a + solution.sides.b + solution.sides.c;
                    const s = perimeter / 2;
                    area = Math.sqrt(s * (s - solution.sides.a) * (s - solution.sides.b) * (s - solution.sides.c));
                }
                
                document.getElementById('resultA').textContent = solution.sides.a ? solution.sides.a.toFixed(4) : '-';
                document.getElementById('resultB').textContent = solution.sides.b ? solution.sides.b.toFixed(4) : '-';
                document.getElementById('resultC').textContent = solution.sides.c ? solution.sides.c.toFixed(4) : '-';
                document.getElementById('resultAngleA').textContent = solution.angles.A ? solution.angles.A.toFixed(2) : '-';
                document.getElementById('resultAngleB').textContent = solution.angles.B ? solution.angles.B.toFixed(2) : '-';
                document.getElementById('resultAngleC').textContent = solution.angles.C ? solution.angles.C.toFixed(2) : '-';
                document.getElementById('perimeter').textContent = perimeter ? perimeter.toFixed(4) : '-';
                document.getElementById('area').textContent = area ? area.toFixed(4) : '-';
                
                let methodExplanation = '';
                if (knownSides === 3) {
                    methodExplanation = 'Used SSS (Side-Side-Side) method with the Law of Cosines to calculate angles.';
                } else if (knownSides === 2 && knownAngles >= 1) {
                    methodExplanation = 'Used SAS (Side-Angle-Side) method with the Law of Cosines to calculate the missing side, then the Law of Cosines for angles.';
                } else if (knownAngles >= 2) {
                    methodExplanation = 'Used AAS (Angle-Angle-Side) method with the sum of internal angles and the Law of Sines to calculate missing sides.';
                }
                document.getElementById('method-content').innerHTML = methodExplanation;
                
                let sidesExplanation = '';
                if (solution.sides.a && solution.sides.b && solution.sides.c) {
                    if (knownSides === 3) {
                        sidesExplanation = 'Sides were provided directly:';
                    } else {
                        sidesExplanation = 'Sides were calculated as follows:<br>';
                        
                        if (!sides.a && sides.b && sides.c && angles.A) {
                            sidesExplanation += `• a = √(b² + c² - 2bc·cosA) = √(${sides.b}² + ${sides.c}² - 2·${sides.b}·${sides.c}·cos(${angles.A}°)) = ${solution.sides.a.toFixed(4)}`;
                        } else if (!sides.b && sides.a && sides.c && angles.B) {
                            sidesExplanation += `• b = √(a² + c² - 2ac·cosB) = √(${sides.a}² + ${sides.c}² - 2·${sides.a}·${sides.c}·cos(${angles.B}°)) = ${solution.sides.b.toFixed(4)}`;
                        } else if (!sides.c && sides.a && sides.b && angles.C) {
                            sidesExplanation += `• c = √(a² + b² - 2ab·cosC) = √(${sides.a}² + ${sides.b}² - 2·${sides.a}·${sides.b}·cos(${angles.C}°)) = ${solution.sides.c.toFixed(4)}`;
                        } else if (knownAngles >= 2) {
                            const ratio = (solution.sides.a / Math.sin(solution.angles.A * Math.PI / 180)).toFixed(4);
                            sidesExplanation += `• Using the Law of Sines: a/sinA = b/sinB = c/sinC = ${ratio}<br>`;
                            if (!sides.a) {
                                sidesExplanation += `• a = sinA × (a/sinA) = sin(${solution.angles.A}°) × ${ratio} = ${solution.sides.a.toFixed(4)}<br>`;
                            }
                            if (!sides.b) {
                                sidesExplanation += `• b = sinB × (a/sinA) = sin(${solution.angles.B}°) × ${ratio} = ${solution.sides.b.toFixed(4)}<br>`;
                            }
                            if (!sides.c) {
                                sidesExplanation += `• c = sinC × (a/sinA) = sin(${solution.angles.C}°) × ${ratio} = ${solution.sides.c.toFixed(4)}<br>`;
                            }
                        }
                    }
                    
                    sidesExplanation += `<br>Final sides:<br>• a = ${solution.sides.a.toFixed(4)}<br>• b = ${solution.sides.b.toFixed(4)}<br>• c = ${solution.sides.c.toFixed(4)}`;
                }
                document.getElementById('sides-content').innerHTML = sidesExplanation;
                
                let anglesExplanation = '';
                if (solution.angles.A && solution.angles.B && solution.angles.C) {
                    if (knownAngles >= 2) {
                        anglesExplanation = 'Angles were calculated as follows:<br>';
                        
                        if (!angles.A) {
                            anglesExplanation += `• A = 180° - B - C = 180° - ${angles.B}° - ${angles.C}° = ${solution.angles.A.toFixed(2)}°<br>`;
                        }
                        if (!angles.B) {
                            anglesExplanation += `• B = 180° - A - C = 180° - ${angles.A}° - ${angles.C}° = ${solution.angles.B.toFixed(2)}°<br>`;
                        }
                        if (!angles.C) {
                            anglesExplanation += `• C = 180° - A - B = 180° - ${angles.A}° - ${angles.B}° = ${solution.angles.C.toFixed(2)}°<br>`;
                        }
                    } else {
                        anglesExplanation = 'Angles were calculated using the Law of Cosines:<br>';
                        anglesExplanation += `• A = cos⁻¹[(b² + c² - a²)/(2bc)] = ${solution.angles.A.toFixed(2)}°<br>`;
                        anglesExplanation += `• B = cos⁻¹[(a² + c² - b²)/(2ac)] = ${solution.angles.B.toFixed(2)}°<br>`;
                        anglesExplanation += `• C = 180° - A - B = ${solution.angles.C.toFixed(2)}°`;
                    }
                    
                    anglesExplanation += `<br>Final angles:<br>• A = ${solution.angles.A.toFixed(2)}°<br>• B = ${solution.angles.B.toFixed(2)}°<br>• C = ${solution.angles.C.toFixed(2)}°`;
                    
                    const angleSum = solution.angles.A + solution.angles.B + solution.angles.C;
                    anglesExplanation += `<br><br>Angle sum: ${solution.angles.A.toFixed(2)}° + ${solution.angles.B.toFixed(2)}° + ${solution.angles.C.toFixed(2)}° = ${angleSum.toFixed(2)}°`;
                }
                document.getElementById('angles-content').innerHTML = anglesExplanation;
                
                let perimeterExplanation = '-';
                if (perimeter) {
                    perimeterExplanation = `Perimeter = a + b + c = ${solution.sides.a.toFixed(4)} + ${solution.sides.b.toFixed(4)} + ${solution.sides.c.toFixed(4)} = ${perimeter.toFixed(4)}`;
                }
                document.getElementById('perimeter-content').innerHTML = perimeterExplanation;
                
                let areaExplanation = '-';
                if (area) {
                    const s = perimeter / 2;
                    areaExplanation = `Using Heron's formula:<br>`;
                    areaExplanation += `Semi-perimeter (s) = (a + b + c)/2 = ${s.toFixed(4)}<br>`;
                    areaExplanation += `Area = √[s(s-a)(s-b)(s-c)] = √[${s.toFixed(4)}(${(s-solution.sides.a).toFixed(4)})(${(s-solution.sides.b).toFixed(4)})(${(s-solution.sides.c).toFixed(4)})] = ${area.toFixed(4)}`;
                }
                document.getElementById('area-content').innerHTML = areaExplanation;
                
                let validationExplanation = '';
                if (solution.sides.a && solution.sides.b && solution.sides.c) {
                    validationExplanation = 'Triangle inequality validation:<br>';
                    validationExplanation += `• a + b > c: ${solution.sides.a.toFixed(4)} + ${solution.sides.b.toFixed(4)} = ${(solution.sides.a + solution.sides.b).toFixed(4)} > ${solution.sides.c.toFixed(4)} → ${solution.sides.a + solution.sides.b > solution.sides.c ? '✔' : '✖'}<br>`;
                    validationExplanation += `• a + c > b: ${solution.sides.a.toFixed(4)} + ${solution.sides.c.toFixed(4)} = ${(solution.sides.a + solution.sides.c).toFixed(4)} > ${solution.sides.b.toFixed(4)} → ${solution.sides.a + solution.sides.c > solution.sides.b ? '✔' : '✖'}<br>`;
                    validationExplanation += `• b + c > a: ${solution.sides.b.toFixed(4)} + ${solution.sides.c.toFixed(4)} = ${(solution.sides.b + solution.sides.c).toFixed(4)} > ${solution.sides.a.toFixed(4)} → ${solution.sides.b + solution.sides.c > solution.sides.a ? '✔' : '✖'}`;
                }
                
                const angleSum = solution.angles.A + solution.angles.B + solution.angles.C;
                validationExplanation += '<br><br>Angle validation:<br>';
                validationExplanation += `Angle sum: ${solution.angles.A.toFixed(2)}° + ${solution.angles.B.toFixed(2)}° + ${solution.angles.C.toFixed(2)}° = ${angleSum.toFixed(2)}° → ${Math.abs(angleSum - 180) < 0.1 ? '✔ (≈180°)' : '✖ (Does not sum to 180°)'}`;
                
                document.getElementById('validation-content').innerHTML = validationExplanation;
                
                drawTriangle(solution.sides, solution.angles);
            }
            
            function resetValues() {
                document.getElementById('sideA').value = '';
                document.getElementById('sideB').value = '';
                document.getElementById('sideC').value = '';
                document.getElementById('angleA').value = '';
                document.getElementById('angleB').value = '';
                document.getElementById('angleC').value = '';
                
                document.getElementById('resultA').textContent = '-';
                document.getElementById('resultB').textContent = '-';
                document.getElementById('resultC').textContent = '-';
                document.getElementById('resultAngleA').textContent = '-';
                document.getElementById('resultAngleB').textContent = '-';
                document.getElementById('resultAngleC').textContent = '-';
                document.getElementById('perimeter').textContent = '-';
                document.getElementById('area').textContent = '-';
                
                document.getElementById('method-content').textContent = '-';
                document.getElementById('sides-content').textContent = '-';
                document.getElementById('angles-content').textContent = '-';
                document.getElementById('perimeter-content').textContent = '-';
                document.getElementById('area-content').textContent = '-';
                document.getElementById('validation-content').textContent = '-';
                
                ctx.clearRect(0, 0, canvas.width, canvas.height);
                
                ctx.font = '20px Lobster';
                ctx.fillStyle = '#5F00FF';
                ctx.textAlign = 'center';
                ctx.fillText('Enter triangle data', canvas.width / 2, canvas.height / 2);
            }
            
            calculateBtn.addEventListener('click', solveTriangle);
            resetBtn.addEventListener('click', resetValues);
            
            resetValues();
        });
    </script>
</body>
</html>
